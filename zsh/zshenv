################################################################################
## Thomas Leon Highbaugh #######################################################
## Dotfiles ####################################################################
## ${HOME}/.zshenv #############################################################
################################################################################


# Global Order: zshenv, zprofile, zshrc, zlogin



################################################################################
## Config Directory 
################################################################################

export XDG_CONFIG_HOME="$HOME/.config"


################################################################################
## Path Modification ###########################################################
################################################################################

export PATH="$XDG_CONFIG_HOME/yarn/global/node_modules/.bin:$PATH"
PATH="$HOME/bin:$PATH"
PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.5/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.4/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.0/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

################################################################################
## ZPlug #######################################################################
################################################################################

source ~/.zplug/init.zsh

## ZPlug Plugins ###############################################################
# Load theme file
#zplug "themes/dogenpunk", from:oh-my-zsh, as:theme
# Plugins
zplug "romkatv/powerlevel10k", as:theme, depth:1  # the faster powerline theme  
zplug "chrissicool/zsh-256color"                  # adds 256 to terminal
zplug "djui/alias-tips"                           # reminds user of alias if full command entered
zplug "gretzky/auto-color-ls"                     # automatically colors ls commands
zplug "zsh-users/zsh-autosuggestions"             # suggests command completion
zplug "bartboy011/cd-reminder"                    # upon cd, displays reminders in .cd-reminder file
zplug "zdharma/fast-syntax-highlighting"          # highlights source code syntax
zplug "lukechilds/zsh-nvm"                        # loads nvm through zsh

## Initialization ##############################################################
# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Allow zplug to manage zplug
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# Then, source plugins and add commands to $PATH
zplug load --verbose

## Misc Plugins ################################################################

# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh

[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
[ -f /usr/local/etc/profile.d/z.sh ] && . /usr/local/etc/profile.d/z.sh


################################################################################
## Variable Definitions ######################################################## 
################################################################################


## Editor ######################################################################
export EDITOR=/usr/bin/nvim
export EDITORD=/usr/bin/nvim
export GUI_EDITOR=/usr/share/applications/nvim.desktop
export TERM="xterm-256color"
## QT ##########################################################################
export QT_QPA_PLATFORMTHEME="qt5ct"
export QT_AUTO_SCREEN_SCALE_FACTOR=0

## XDG #########################################################################
export XDG_CURRENT_DESKTOP=XFCE
export XDG_CONFIG_DIRS=/etc/xdg


## GOLANG ######################################################################
export GOPATH=$HOME/go
export GO15VENDOREXPERIMENT=1

## OS ##########################################################################
export TERMINFO=~/.terminfo
export tOS=`uname -s`
export ARCH=`uname -m`

## Pager #######################################################################
export PAGER="less"
export LESS="-RMin"
export RI_PAGER='less -FX'

## History #####################################################################
export SAVEHIST=9999
export HISTSIZE=9999
export HISTFILE=$HOME/.zhistory
export HIST_EXPIRE_DUPS_FIRST=true

## Personal Email ##############################################################
export EMAIL="thighbaugh@zoho.com"

## Color man pages #############################################################
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r

## NVM #########################################################################
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

## Locally Set & Useful ########################################################

export DATE=$(date +%s)
export WORDCHARS=${WORDCHARS//\/[&.;]}                               

################################################################################
## Local Sources ###############################################################
################################################################################

source $HOME/.aliases

### Prompt
RPROMPT='$(git_prompt_string)'

### User Config Files
source  "${HOME}/.profile"
source "$HOME/.aliases"

################################################################################
## Keybindings #################################################################
################################################################################

bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

# bind UP and DOWN arrow keys to history substring search
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

################################################################################
## Prompt ######################################################################
################################################################################

# enable substitution for prompt
setopt prompt_subst
PROMPT="%B%{$fg[purple]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[purple]%}>%B%(?.%{$fg[purple]%}.%{$fg[yellow]%})>%{$reset_color%}%b " 

# Git Prompt Symbols 
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"                              # plus/minus     - clean repo
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"             # A"NUM"         - ahead by "NUM" commits
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"           # B"NUM"         - behind by "NUM" commits
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"       # red circle     - untracked files
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}●%{$reset_color%}"     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"        # green circle   - staged changes present = ready for "git push"
parse_git_branch() {
  # Show Git branch/tag, or name-rev if on detached head
  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null
}
parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=""
  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi
}
git_prompt_string() {
  local git_where="$(parse_git_branch)"
  # If inside a Git repository, print its branch and state
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n "$git_where" ] && echo "%{$fg[red]%} %(?..[%?])"
}

################################################################################
## Options #####################################################################
################################################################################

setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.


zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache


# Theme Options 
autoload -U compinit colors zcalc
compinit -d






